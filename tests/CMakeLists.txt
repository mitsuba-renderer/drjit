string(TOUPPER "${ENOKI_ARCH_FLAGS}" ENOKI_ARCH_FLAGS)

if (MSVC)
  set(ENOKI_NONE_FLAGS /DENOKI_DISABLE_VECTORIZATION)
  if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(ENOKI_SSE42_FLAGS /D__SSE4_2__)
  else()
    set(ENOKI_SSE42_FLAGS /arch:SSE2 /D__SSE4_2__)
  endif()
  set(ENOKI_AVX_FLAGS /arch:AVX)
  set(ENOKI_AVX2_FLAGS /arch:AVX2)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  add_compile_options(-wd11074 -wd11076)
  set(ENOKI_NONE_FLAGS -DENOKI_DISABLE_VECTORIZATION -ffp-contract=off)
  set(ENOKI_SSE42_FLAGS -xSSE4.2)
  set(ENOKI_AVX_FLAGS -xCORE-AVX-I)
  set(ENOKI_AVX2_FLAGS -xCORE-AVX2)
  set(ENOKI_AVX512_FLAGS -xCORE-AVX512)
else()
  set(ENOKI_NONE_FLAGS -DENOKI_DISABLE_VECTORIZATION -ffp-contract=off)
  set(ENOKI_SSE42_FLAGS -msse4.2)
  set(ENOKI_AVX_FLAGS -mavx)
  set(ENOKI_AVX2_FLAGS -mavx2 -mfma -mf16c -mbmi -mbmi2 -mlzcnt)
  if (APPLE AND ${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
    set(ENOKI_AVX512_FLAGS -march=skylake-avx512 -Wa,-march=skx)
  else()
    set(ENOKI_AVX512_FLAGS -march=skylake-avx512)
  endif()
  set(ENOKI_NEON_FLAGS )
  if (${CMAKE_SYSTEM_PROCESSOR} MATCHES armv7)
    set(ENOKI_NEON_FLAGS -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard -mfp16-format=ieee)
  elseif (${CMAKE_SYSTEM_PROCESSOR} MATCHES aarch64)
    set(ENOKI_NEON_FLAGS -march=armv8-a+simd -mtune=cortex-a53)
  endif()
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

add_custom_target(check
        ${CMAKE_COMMAND} -E echo CWD=${CMAKE_BINARY_DIR}
        COMMAND ${CMAKE_COMMAND} -E echo CMD=${CMAKE_CTEST_COMMAND} -C $<CONFIG>
        COMMAND ${CMAKE_COMMAND} -E echo ----------------------------------
        COMMAND ${CMAKE_COMMAND} -E env CTEST_OUTPUT_ON_FAILURE=1
            ${CMAKE_CTEST_COMMAND} -C $<CONFIG>
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    USES_TERMINAL
)

function(enoki_test NAME)
  if (ENOKI_TEST_NAME)
    if (NOT "${ENOKI_TEST_NAME}" STREQUAL "${NAME}")
      return()
    endif()
  endif()
  add_executable(${NAME}_none ${ARGN} ${ENOKI_HEADERS})
  add_test(${NAME}_none_test ${NAME}_none)
  set_tests_properties(${NAME}_none_test PROPERTIES LABELS "none")
  set_target_properties(${NAME}_none PROPERTIES FOLDER ${NAME})
  target_compile_options(${NAME}_none PRIVATE ${ENOKI_NONE_FLAGS})
  target_link_libraries(${NAME}_none enoki)

  if (CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
    add_executable(${NAME}_neon ${ARGN} ${ENOKI_HEADERS})
    target_compile_options(${NAME}_neon PRIVATE ${ENOKI_NEON_FLAGS})
    set_target_properties(${NAME}_neon PROPERTIES FOLDER ${NAME})
    add_test(${NAME}_neon_test ${NAME}_neon)
    set_tests_properties(${NAME}_neon_test PROPERTIES LABELS "neon")
    target_link_libraries(${NAME}_neon enoki)
  else()
    add_executable(${NAME}_sse42 ${ARGN} ${ENOKI_HEADERS})
    target_compile_options(${NAME}_sse42 PRIVATE ${ENOKI_SSE42_FLAGS})
    set_target_properties(${NAME}_sse42 PROPERTIES FOLDER ${NAME})
    add_test(${NAME}_sse42_test ${NAME}_sse42)
    set_tests_properties(${NAME}_sse42_test PROPERTIES LABELS "sse42")
    target_link_libraries(${NAME}_sse42 enoki)

    add_executable(${NAME}_avx ${ARGN} ${ENOKI_HEADERS})
    target_compile_options(${NAME}_avx PRIVATE ${ENOKI_AVX_FLAGS})
    set_target_properties(${NAME}_avx PROPERTIES FOLDER ${NAME})
    add_test(${NAME}_avx_test ${NAME}_avx)
    set_tests_properties(${NAME}_avx_test PROPERTIES LABELS "avx")
    target_link_libraries(${NAME}_avx enoki)

    add_executable(${NAME}_avx2 ${ARGN} ${ENOKI_HEADERS})
    target_compile_options(${NAME}_avx2 PRIVATE ${ENOKI_AVX2_FLAGS})
    set_target_properties(${NAME}_avx2 PROPERTIES FOLDER ${NAME})
    add_test(${NAME}_avx2_test ${NAME}_avx2)
    set_tests_properties(${NAME}_avx2_test PROPERTIES LABELS "avx2")
    target_link_libraries(${NAME}_avx2 enoki)

    if (NOT MSVC)
      add_executable(${NAME}_avx512 ${ARGN} ${ENOKI_HEADERS})
      target_compile_options(${NAME}_avx512 PRIVATE ${ENOKI_AVX512_FLAGS})
      set_target_properties(${NAME}_avx512 PROPERTIES FOLDER ${NAME})
      add_test(${NAME}_avx512_test ${NAME}_avx512)
      set_tests_properties(${NAME}_avx512_test PROPERTIES LABELS "avx512")
      target_link_libraries(${NAME}_avx512 enoki)
    endif()
  endif()
endfunction()

enoki_test(basic basic.cpp)
enoki_test(float float.cpp)
enoki_test(integer integer.cpp)
enoki_test(explog explog.cpp)
enoki_test(trig trig.cpp)
enoki_test(matrix matrix.cpp)
enoki_test(nested nested.cpp)
enoki_test(idiv idiv.cpp)
enoki_test(hyperbolic hyperbolic.cpp)
enoki_test(memory memory.cpp)
# enoki_test(memory2 memory2.cpp)
enoki_test(horiz horiz.cpp)
#enoki_test(vector vector.cpp)
#enoki_test(conv conv.cpp)
#enoki_test(dynamic dynamic.cpp)
#enoki_test(histogram histogram.cpp)
#enoki_test(sphere sphere.cpp)
enoki_test(complex complex.cpp)
#enoki_test(morton morton.cpp)
#enoki_test(special special.cpp)
#enoki_test(call call.cpp)
enoki_test(sh sh.cpp)
enoki_test(color color.cpp)
enoki_test(struct struct.cpp)

# if (ENOKI_ENABLE_JIT)
#     add_executable(matrix matrix.cpp)
#     target_link_libraries(matrix enoki enoki-jit)
#     add_test(matrix_test matrix)
# endif()

if (ENOKI_ENABLE_JIT AND ENOKI_ENABLE_AUTODIFF)
  add_executable(custom custom.cpp)
  target_link_libraries(custom enoki enoki-autodiff enoki-jit)
  add_test(custom_test custom)
  set_tests_properties(custom_test PROPERTIES LABELS "jit")

  add_executable(vcall vcall.cpp)
  target_link_libraries(vcall enoki enoki-autodiff enoki-jit)
  add_test(vcall_test vcall)
  set_tests_properties(vcall_test PROPERTIES LABELS "jit")

  add_executable(ad_megakernel ad_megakernel.cpp)
  target_link_libraries(ad_megakernel enoki enoki-autodiff enoki-jit)
  add_test(ad_megakernel_test ad_megakernel)
  set_tests_properties(ad_megakernel_test PROPERTIES LABELS "jit")
endif()
